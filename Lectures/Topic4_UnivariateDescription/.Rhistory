results_losers%>%int_pctl(tov_mean)
sample_size=100
calc_tov_mean_winners <- function(split){
dat <- analysis(split) %>% ## create an object called dat from each "split" of the data
filter(isWin)%>% ## filter just for winners
sample_n(size=sample_size)%>% ## Sample the split down to 100
pull(tov) ## pull just turnovers
# Put it in this tidy format to use int_pctl
return(tibble( ## return a tibble
term = "mean", ## the variable will be named mean
estimate = mean(dat))) ## the estimate is the mean of dat from above
}
calc_tov_mean_losers <- function(split){
dat <- analysis(split) %>% ## create an object called dat from each "split" of the data
filter(!isWin)%>% ## filter just for losers
sample_n(size=sample_size)%>% ## Sample the split down to 100
pull(tov) ## pull just turnovers
# Put it in this tidy format to use int_pctl
return(tibble( ## return a tibble
term = "mean", ## the variable will be named mean
estimate = mean(dat))) ## the estimate is the mean of dat from above
}
results_winners<-boot_2017%>% ## start with the resampled dataset
mutate(tov_mean= ## mutate to create a column called tov_mean
map(splits,calc_tov_mean_winners))  ## map the "calc" function onto each split
results_winners%>%int_pctl(tov_mean)
results_losers<-boot_2017%>% ## start with the resampled dataset
mutate(tov_mean= ## mutate to create a column called tov_mean
map(splits,calc_tov_mean_losers))  ## map the "calc" function onto each split
results_losers%>%int_pctl(tov_mean)
# Chunk 1
library(tidyverse)
#install.packages(tidymodels)
library(tidymodels)
# Chunk 2
gms<-read_rds("game_summary.Rds")
gms
# Chunk 3
gms%>%
filter(yearSeason==2017)%>%
group_by(isWin)%>%
summarize(mean(tov))
# Chunk 4
gms%>%
filter(yearSeason==2018)%>%
group_by(isWin)%>%
summarize(mean(tov))
gms%>%
filter(yearSeason==2019)%>%
group_by(isWin)%>%
summarize(mean(tov))
# Chunk 5
set.seed(210916)
sample_size<-100
gms%>%
filter(yearSeason==2017)%>% ## Filter to just 2017
sample_n(size=sample_size) %>% ## Sample size is as set above
group_by(isWin)%>% ## Group by win/lose
summarize(mean(tov)) ## calculate mean
# Chunk 6
gms%>%
filter(yearSeason==2017)%>% ## Filter to just 2017
sample_n(size=sample_size) %>% ## Sample size is as set above
group_by(isWin)%>% ## Group by win/lose
summarize(mean(tov)) ## calculate mean
# Chunk 7
gms_tov_rs<-NULL ##  Create a NULL varaible: will fill this in later
for (i in 1:1000){ # Repeat the steps below 1000 times
gms_tov_rs<-gms%>% ## Create a dataset called gms_tov_rs (rs=resampled)
filter(yearSeason==2017)%>%  ## Just 2017
sample_n(size=sample_size) %>% ## Sample 100 games
group_by(isWin)%>% ## Group by won or lost
summarize(mean_tov=mean(tov))%>% ## Calculate mean turnovers for winners and losers
bind_rows(gms_tov_rs) ## add this result to the existing dataset
}
# Chunk 8
gms_tov_rs%>%
group_by(isWin)%>%
summarise(mean_of_means=mean(mean_tov))
# Chunk 9
gms%>%
filter(yearSeason==2017)%>%
group_by(isWin)%>%
summarize(mean(tov))
# Chunk 10
gms_tov_rs%>%
filter(isWin)%>%
ggplot(aes(x=mean_tov,fill=isWin))+
geom_density(alpha=.3)+
geom_vline(xintercept =12.9)
# Chunk 11
gms_tov_rs%>%
filter(isWin)%>%
summarize(value=fivenum(mean_tov))%>%
mutate(measure=c("Min","25th percentile","Median","75th percentile","Max"))%>%
select(measure, value)
# Chunk 12
gms_tov_rs%>%
filter(!isWin)%>%
ggplot(aes(x=mean_tov,fill=isWin))+
geom_density(alpha=.3,fill="lightblue")+
geom_vline(xintercept =13.8)
# Chunk 13
gms_tov_rs%>%
filter(!isWin)%>%
summarize(value=fivenum(mean_tov))%>%
mutate(measure=c("Min","25th percentile","Median","75th percentile","Max"))%>%
select(measure, value)
# Chunk 14
gms_tov_rs%>%
filter(isWin)%>%
summarize(pct_05=quantile(mean_tov,.025),
pct_95=quantile(mean_tov,.975))
# Chunk 15
gms_tov_rs%>%
filter(!isWin)%>%
summarize(pct_05=quantile(mean_tov,.025),
pct_95=quantile(mean_tov,.975))
# Chunk 16
gms%>%
filter(yearSeason==2018)%>%
group_by(isWin)%>%
summarize(mean(tov))
# Chunk 17
gms%>%
filter(yearSeason==2019)%>%
group_by(isWin)%>%
summarize(mean(tov))
# Chunk 18
gms_tov_rs%>%
group_by(isWin)%>%
summarize(pct_25=quantile(mean_tov,.25),
pct_75=quantile(mean_tov,.75))
# Chunk 19
gms%>%
filter(yearSeason==2018)%>%
group_by(isWin)%>%
summarize(mean(tov))
# Chunk 20
gms%>%
filter(yearSeason==2019)%>%
group_by(isWin)%>%
summarize(mean(tov))
# Chunk 21
gms_tov_rs%>%
group_by(isWin)%>%
summarize(pct_45=quantile(mean_tov,.45),
pct_55=quantile(mean_tov,.55))
# Chunk 22
gms%>%
filter(yearSeason==2018)%>%
group_by(isWin)%>%
summarize(mean(tov))
# Chunk 23
gms%>%
filter(yearSeason==2019)%>%
group_by(isWin)%>%
summarize(mean(tov))
# Chunk 24
gms_ft_80_rs%>%
group_by(isWin)%>%
summarize(pct_25=quantile(mean_ft80,.25),
pct_75=quantile(mean_ft80,.75))
# Chunk 25
gms%>%
filter(yearSeason==2018)%>%
summarize(mean(ft_80))
# Chunk 26
gms%>%
filter(yearSeason==2019)%>%
summarize(mean(ft_80))
# Chunk 27
bs_prop<-gms%>%
filter(yearSeason==2017)%>%
count()%>%
summarize(prop=sample_size/n)%>%
as_vector()
boot_2017<-mc_cv(gms%>%filter(yearSeason==2017),
prop=1-bs_prop,
times = 1000)
# Chunk 28
calc_tov_mean_winners <- function(split){
dat <- assessment(split) %>% ## create an object called dat from each "split" of the data
filter(isWin)%>% ## filter just for winners
pull(tov) ## pull just turnovers
# Put it in this tidy format to use int_pctl
return(tibble( ## return a tibble
term = "mean", ## the variable will be named mean
estimate = mean(dat))) ## the estimate is the mean of dat from above
}
calc_tov_mean_losers <- function(split){
dat <- assessment(split) %>% ## create an object called dat from each "split" of the data
filter(!isWin)%>% ## filter just for losers
pull(tov) ## pull just turnovers
# Put it in this tidy format to use int_pctl
return(tibble( ## return a tibble
term = "mean", ## the variable will be named mean
estimate = mean(dat))) ## the estimate is the mean of dat from above
}
boot_2017$splits[[1]]%>%
assessment()%>%
filter(isWin)%>%
sample_n(size=sample_size)
boot_2017$splits[[1]]%>%
assessment()%>%
filter(isWin)%>%
sample_n(size=sample_size)
# Chunk 1
library(tidyverse)
#install.packages(tidymodels)
library(tidymodels)
# Chunk 2
gms<-read_rds("game_summary.Rds")
gms
# Chunk 3
gms%>%
filter(yearSeason==2017)%>%
group_by(isWin)%>%
summarize(mean(tov))
# Chunk 4
gms%>%
filter(yearSeason==2018)%>%
group_by(isWin)%>%
summarize(mean(tov))
gms%>%
filter(yearSeason==2019)%>%
group_by(isWin)%>%
summarize(mean(tov))
# Chunk 5
set.seed(210916)
sample_size<-100
gms%>%
filter(yearSeason==2017)%>% ## Filter to just 2017
sample_n(size=sample_size) %>% ## Sample size is as set above
group_by(isWin)%>% ## Group by win/lose
summarize(mean(tov)) ## calculate mean
# Chunk 6
gms%>%
filter(yearSeason==2017)%>% ## Filter to just 2017
sample_n(size=sample_size) %>% ## Sample size is as set above
group_by(isWin)%>% ## Group by win/lose
summarize(mean(tov)) ## calculate mean
# Chunk 7
gms_tov_rs<-NULL ##  Create a NULL varaible: will fill this in later
for (i in 1:1000){ # Repeat the steps below 1000 times
gms_tov_rs<-gms%>% ## Create a dataset called gms_tov_rs (rs=resampled)
filter(yearSeason==2017)%>%  ## Just 2017
sample_n(size=sample_size) %>% ## Sample 100 games
group_by(isWin)%>% ## Group by won or lost
summarize(mean_tov=mean(tov))%>% ## Calculate mean turnovers for winners and losers
bind_rows(gms_tov_rs) ## add this result to the existing dataset
}
# Chunk 8
gms_tov_rs%>%
group_by(isWin)%>%
summarise(mean_of_means=mean(mean_tov))
# Chunk 9
gms%>%
filter(yearSeason==2017)%>%
group_by(isWin)%>%
summarize(mean(tov))
# Chunk 10
gms_tov_rs%>%
filter(isWin)%>%
ggplot(aes(x=mean_tov,fill=isWin))+
geom_density(alpha=.3)+
geom_vline(xintercept =12.9)
# Chunk 11
gms_tov_rs%>%
filter(isWin)%>%
summarize(value=fivenum(mean_tov))%>%
mutate(measure=c("Min","25th percentile","Median","75th percentile","Max"))%>%
select(measure, value)
# Chunk 12
gms_tov_rs%>%
filter(!isWin)%>%
ggplot(aes(x=mean_tov,fill=isWin))+
geom_density(alpha=.3,fill="lightblue")+
geom_vline(xintercept =13.8)
# Chunk 13
gms_tov_rs%>%
filter(!isWin)%>%
summarize(value=fivenum(mean_tov))%>%
mutate(measure=c("Min","25th percentile","Median","75th percentile","Max"))%>%
select(measure, value)
# Chunk 14
gms_tov_rs%>%
filter(isWin)%>%
summarize(pct_05=quantile(mean_tov,.025),
pct_95=quantile(mean_tov,.975))
# Chunk 15
gms_tov_rs%>%
filter(!isWin)%>%
summarize(pct_05=quantile(mean_tov,.025),
pct_95=quantile(mean_tov,.975))
# Chunk 16
gms%>%
filter(yearSeason==2018)%>%
group_by(isWin)%>%
summarize(mean(tov))
# Chunk 17
gms%>%
filter(yearSeason==2019)%>%
group_by(isWin)%>%
summarize(mean(tov))
# Chunk 18
gms_tov_rs%>%
group_by(isWin)%>%
summarize(pct_25=quantile(mean_tov,.25),
pct_75=quantile(mean_tov,.75))
# Chunk 19
gms%>%
filter(yearSeason==2018)%>%
group_by(isWin)%>%
summarize(mean(tov))
# Chunk 20
gms%>%
filter(yearSeason==2019)%>%
group_by(isWin)%>%
summarize(mean(tov))
# Chunk 21
gms_tov_rs%>%
group_by(isWin)%>%
summarize(pct_45=quantile(mean_tov,.45),
pct_55=quantile(mean_tov,.55))
# Chunk 22
gms%>%
filter(yearSeason==2018)%>%
group_by(isWin)%>%
summarize(mean(tov))
# Chunk 23
gms%>%
filter(yearSeason==2019)%>%
group_by(isWin)%>%
summarize(mean(tov))
# Chunk 24
gms_ft_80_rs%>%
group_by(isWin)%>%
summarize(pct_25=quantile(mean_ft80,.25),
pct_75=quantile(mean_ft80,.75))
# Chunk 25
gms%>%
filter(yearSeason==2018)%>%
summarize(mean(ft_80))
# Chunk 26
gms%>%
filter(yearSeason==2019)%>%
summarize(mean(ft_80))
# Chunk 27
bs_prop<-gms%>%
filter(yearSeason==2017)%>%
count()%>%
summarize(prop=sample_size/n)%>%
as_vector()
boot_2017<-mc_cv(gms%>%filter(yearSeason==2017),
prop=1-bs_prop,
times = 1000)
# Chunk 28
calc_tov_mean_winners <- function(split){
dat <- assessment(split) %>% ## create an object called dat from each "split" of the data
filter(isWin)%>% ## filter just for winners
pull(tov) ## pull just turnovers
# Put it in this tidy format to use int_pctl
return(tibble( ## return a tibble
term = "mean", ## the variable will be named mean
estimate = mean(dat))) ## the estimate is the mean of dat from above
}
calc_tov_mean_losers <- function(split){
dat <- assessment(split) %>% ## create an object called dat from each "split" of the data
filter(!isWin)%>% ## filter just for losers
pull(tov) ## pull just turnovers
# Put it in this tidy format to use int_pctl
return(tibble( ## return a tibble
term = "mean", ## the variable will be named mean
estimate = mean(dat))) ## the estimate is the mean of dat from above
}
boot_2017$splits[[1]]%>%
assessment()%>%
filter(isWin)%>%
sample_n(size=sample_size)
help(sample_n)
library(tidyverse)
#install.packages(tidymodels)
library(tidymodels)
gms<-read_rds("game_summary.Rds")
gms
gms%>%
filter(yearSeason==2017)%>%
group_by(isWin)%>%
summarize(mean(tov))
gms%>%
filter(yearSeason==2018)%>%
group_by(isWin)%>%
summarize(mean(tov))
gms%>%
filter(yearSeason==2019)%>%
group_by(isWin)%>%
summarize(mean(tov))
set.seed(210916)
sample_size<-100
gms%>%
filter(yearSeason==2017)%>% ## Filter to just 2017
sample_n(size=sample_size, replace=TRUE) %>% ## Sample size is as set above.  Replacement is set to TRUE
group_by(isWin)%>% ## Group by win/lose
summarize(mean(tov)) ## calculate mean
gms%>%
filter(yearSeason==2017)%>% ## Filter to just 2017
sample_n(size=sample_size, replace=TRUE) %>% ## Sample size is as set above
group_by(isWin)%>% ## Group by win/lose
summarize(mean(tov)) ## calculate mean
gms_tov_rs<-NULL ##  Create a NULL varaible: will fill this in later
for (i in 1:1000){ # Repeat the steps below 1000 times
gms_tov_rs<-gms%>% ## Create a dataset called gms_tov_rs (rs=resampled)
filter(yearSeason==2017)%>%  ## Just 2017
sample_n(size=sample_size, replace=TRUE) %>% ## Sample 100 games
group_by(isWin)%>% ## Group by won or lost
summarize(mean_tov=mean(tov))%>% ## Calculate mean turnovers for winners and losers
bind_rows(gms_tov_rs) ## add this result to the existing dataset
}
gms_tov_rs%>%
group_by(isWin)%>%
summarise(mean_of_means=mean(mean_tov))
gms%>%
filter(yearSeason==2017)%>%
group_by(isWin)%>%
summarize(mean(tov))
gms_tov_rs%>%
filter(isWin)%>%
ggplot(aes(x=mean_tov,fill=isWin))+
geom_density(alpha=.3)+
geom_vline(xintercept =12.9)
gms_tov_rs%>%
filter(isWin)%>%
summarize(value=fivenum(mean_tov))%>%
mutate(measure=c("Min","25th percentile","Median","75th percentile","Max"))%>%
select(measure, value)
gms_tov_rs%>%
filter(!isWin)%>%
ggplot(aes(x=mean_tov,fill=isWin))+
geom_density(alpha=.3,fill="lightblue")+
geom_vline(xintercept =13.8)
gms_tov_rs%>%
filter(!isWin)%>%
summarize(value=fivenum(mean_tov))%>%
mutate(measure=c("Min","25th percentile","Median","75th percentile","Max"))%>%
select(measure, value)
gms_tov_rs%>%
filter(!isWin)%>%
summarize(value=fivenum(mean_tov))%>%
mutate(measure=c("Min","25th percentile","Median","75th percentile","Max"))%>%
select(measure, value)
gms_tov_rs%>%
filter(isWin)%>%
summarize(pct_05=quantile(mean_tov,.025),
pct_95=quantile(mean_tov,.975))
gms_tov_rs%>%
filter(!isWin)%>%
summarize(pct_05=quantile(mean_tov,.025),
pct_95=quantile(mean_tov,.975))
gms_tov_rs%>%
filter(isWin)%>%
summarize(pct_05=quantile(mean_tov,.025),
pct_95=quantile(mean_tov,.975))
gms_tov_rs%>%
filter(isWin)%>%
summarize(pct_05=quantile(mean_tov,.025),
pct_95=quantile(mean_tov,.975))
gms_tov_rs%>%
filter(!isWin)%>%
summarize(pct_05=quantile(mean_tov,.025),
pct_95=quantile(mean_tov,.975))
gms%>%
filter(yearSeason==2018)%>%
group_by(isWin)%>%
summarize(mean(tov))
gms%>%
filter(yearSeason==2019)%>%
group_by(isWin)%>%
summarize(mean(tov))
gms_tov_rs%>%
group_by(isWin)%>%
summarize(pct_25=quantile(mean_tov,.25),
pct_75=quantile(mean_tov,.75))
gms%>%
filter(yearSeason==2018)%>%
group_by(isWin)%>%
summarize(mean(tov))
gms%>%
filter(yearSeason==2019)%>%
group_by(isWin)%>%
summarize(mean(tov))
gms_tov_rs%>%
group_by(isWin)%>%
summarize(pct_45=quantile(mean_tov,.45),
pct_55=quantile(mean_tov,.55))
gms%>%
filter(yearSeason==2019)%>%
group_by(isWin)%>%
summarize(mean(tov))
gms_ft_80_rs%>%
group_by(isWin)%>%
summarize(pct_25=quantile(mean_ft80,.25),
pct_75=quantile(mean_ft80,.75))
gms_ft_80_rs<-NULL ##  Create a NULL variable: will fill this in later
for (i in 1:1000){ # Repeat the steps below 10,000 times
gms_ft_80_rs<-gms%>% ## Create a dataset called gms_tov_rs (rs=resampled)
filter(yearSeason==2017)%>%  ## Just 2017
sample_n(size=sample_size) %>% ## Sample 100 games
group_by(isWin)%>% ## Group by won or lost
summarize(mean_ft80=mean(ft_80))%>% ## Calculate mean turnovers for winners and losers
bind_rows(gms_ft_80_rs) ## add this result to the existing dataset
}
